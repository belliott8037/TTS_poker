num_10 = 20
num_50 = 20
num_100 = 13
deck_GUID = "3a8d6b"
inf_bag_50_GUID = "8e496c"
inf_bag_100_GUID = "a9e126"
inf_bag_500_GUID = "9a0f18"
inf_bag_10_GUID = "26ebe4"
dealer_token_GUID = "1542ed"
table_zone_GUID = "7e94a9"
discard_zone_GUID = "960f61"
BB_GUID = "a560f3"
SB_GUID = "a3ca23"
deal_GUID = "5e50dc"
reset_GUID = "a446b7"
betting_zone_GUID = {"f3a9a4", "873e94", "444e67", "614799", "eb141f", "38cf8c", "7eea62", "f9a8e0"}
color_order = {"White", "Red", "Orange", "Yellow","Green","Blue", "Purple","Pink"}
betting_zones = {}
betting_zone_color = {}
-- Creating color/zone association
for i in ipairs(betting_zone_GUID) do
	betting_zone_color[betting_zone_GUID[i]] = color_order[i]
end
deal_button = {
	click_function = "play", label = "Deal", position = {0,0.1,0},
	rotation = {0,0,0}, width = 500, height = 500, font_size = 200,
	function_owner = nil
}
reset_button = {
	click_function = "reset_board", label = "Reset", position = {0,0.1,0},
	rotation = {0,0,0}, width = 500, height = 500, font_size = 200,
	function_owner = nil
}
--[[ The onLoad event is called after the game save finishes loading. --]]
function onLoad()
    deck = getObjectFromGUID(deck_GUID)
    inf_bag_50 = getObjectFromGUID(inf_bag_50_GUID)
	inf_bag_50.setName("$50")
	big_blind = getObjectFromGUID(BB_GUID)
	big_blind.setName("Big Blind")
	small_blind = getObjectFromGUID(SB_GUID)
	small_blind.setName("Small Blind")
    inf_bag_100 = getObjectFromGUID(inf_bag_100_GUID)
	inf_bag_100.setName("$100")
    inf_bag_500 = getObjectFromGUID(inf_bag_500_GUID)
	inf_bag_500.setName("$500")
    inf_bag_10 = getObjectFromGUID(inf_bag_10_GUID)
	inf_bag_10.setName("$10")
	dealer_token = getObjectFromGUID(dealer_token_GUID)
	dealer_token.setName("Dealer")
    player_colors = getSeatedPlayers()
	deal = getObjectFromGUID(deal_GUID)
	deal.setName("Deal")
	deal.createButton(deal_button)
	reset = getObjectFromGUID(reset_GUID)
	reset.setName("Reset")
	reset.createButton(reset_button)
	for i, v in ipairs(betting_zone_GUID) do
	    betting_zones[i] = getObjectFromGUID(v)
	end
	table_zone = getObjectFromGUID(table_zone_GUID)
	discard_zone = getObjectFromGUID(discard_zone_GUID)
	dealer = nil
	state = 0
end

function onPlayerChangedColor(color)
    if color != 'Grey' and color != 'Black' then
        dealInitialChips(color)
    end
end

function onObjectEnterScriptingZone(zone, obj)
	if obj.getGUID() == dealer_token.guid then
		dealer = getColor(zone.guid)
		return dealer
	end
end

function onObjectLeaveScriptingZone(zone, leave_object)
	if leave_object.getGUID() == dealer_token.guid then
		dealer = nil
		return dealer
	end
end

function getColor(zone_guid)
	return betting_zone_color[zone_guid]
end

function play(obj,color)
	-- Step 1: Locate Dealer
	if dealer == nil then
		rgb = {r=1, g=0, b=0}
		broadcastToAll("No Dealer Found", rgb)
	else
		if state == 0 or state == 1 then
			-- Deal clockwise from dealer.
			deal_params = {dealer, player_colors}
			deck.call("deal", deal_params)
			-- UPDATE STATE AFTER CALL
			if state == 0 then
				state = 1
			else
				state = 2
			end
		elseif state == 2 then
		 	deck.call("flop")
			state = 3
		elseif state == 3 then
			deck.call("turn")
			state = 4
		elseif state == 4 then
			deck.call("river")
			state = 5
		else
			rgb = {r=1, g=1, b=0}
			broadcastToAll("SHOWDOWN", rgb)
		end
	end
	-- This stuff could be useful for future pot adding/updating?
	-- for i in ipairs(betting_zones) do
	-- 	-- .getObjects()[1] is first entry of the table.
	-- 	if betting_zones[i].getObjects()[1] != nil then
	-- 		print("Object(s) found: ")
	-- 		objects = betting_zones[i].getObjects()
	-- 		for i in ipairs(objects) do
	-- 			print(objects[i].guid)
	-- 			if objects[i].guid == dealer_token.guid then
	-- 				print("FOUND IT ")
	-- 			end
	-- 		end
	-- 	else
	-- 		--print("empty zone")
	-- 	end
	-- end
end

-- resets gameboard, takes cards from players hands and table, replaces them in the deck.
-- if deck does not equal 52 cards after reset, delete old deck, create new deck in its spot
-- reset state variable
function reset_board()
	state = 0
	-- TODO do this last since big fuck you zones should be the last thing to do.
	discard_zone_cards = discard_zone.getObjects()


	-- TODO tweek location of flop to get deck location.
	for i, object in ipairs(discard_zone_cards) do
		if object.tag == "Deck" or object.tag == "Card" then
			print(discard_zone_cards[i])
			print(discard_zone_cards.positionToWorld())
			discard_params = {
				position = {x=position.x+2, y=position.y+2, z=z}
			}
			discard_zone_cards[i].takeObject()
			-- for j in ipairs(object[i]) do
			-- 	print(object[j])
			-- end
		-- elseif object.tag == "Card" then
		-- 	--print("Object is a card")
		-- 	deck_params = {
		-- 		position = {x=2, y=1, z=2}
		-- 	}
		-- 	object.takeObject()
		end
	end
	-- objects_in_zone = table_zone.getObjects()
	-- for i, object in ipairs(objects_in_zone) do
	-- 	if object.tag == "Card" then
	-- 		object.putObject(deck)
	-- 	end
	-- end
end

function dealInitialChips(color)
    for i = 1, num_50 do
        inf_bag_50.call('dealChips', {color})
    end
    for i = 1, num_100 do
        inf_bag_100.call('dealChips', {color})
    end
    for i = 1, num_10 do
        inf_bag_10.call('dealChips', {color})
    end
end
