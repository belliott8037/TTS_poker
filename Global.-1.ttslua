num_10 = 20
num_50 = 20
num_100 = 13
deck_position = {x=-8.5,y=2,z=-2}
deck_rotation = {x=0,y=0,z=0}
pot_position_10s = {x=-3, y=2,z=3}
pot_position_50s = {x=-1, y=2,z=3}
pot_position_100s = {x=1, y=2,z=3}
pot_position_500s = {x=3, y=2,z=3}
pot_rotation = {x=0,y=90,z=0}
discard_rotation = {x=0, y=0, z=0}
discard_position = {x=-11.75,y=3,z=-1.75}
pot_GUID = "53b30a"
deck_GUID = "3a8d6b"
inf_bag_10_GUID = "26ebe4"
inf_bag_50_GUID = "8e496c"
inf_bag_100_GUID = "a9e126"
inf_bag_500_GUID = "9a0f18"
dealer_token_GUID = "1542ed"
discard_zone_GUID = "960f61"
BB_GUID = "a560f3"
SB_GUID = "a3ca23"
deal_GUID = "5e50dc"
reset_GUID = "a446b7"
collect_bets_GUID = "2f1c02"
total_bets_text_GUID = "70817b"
table_zone_GUID = "0e25c7"
deck_button_GUID = "90319e"
betting_zone_GUID = {"f3a9a4", "873e94", "eb966b", "14ccd8", "8e07ed", "49c7b4", "7eea62", "f9a8e0"}
color_order = {"White","Red","Orange","Yellow","Green","Blue","Purple","Pink"}
-- using a dictionary does not guarantee order because you have to loop using
-- pairs instead of ipairs.
-- zone_dict = {
-- 	["f3a9a4"] = "White",
-- 	["873e94"] = "Red",
-- 	["eb966b"] = "Orange",
-- 	["14ccd8"] = "Yellow",
-- 	["8e07ed"] = "Green",
-- 	["49c7b4"] = "Blue",
-- 	["7eea62"] = "Purple",
-- 	["f9a8e0"] = "Pink",
-- }
betting_zone_color = {}
text_zone = {}
player_colors = {}
-- -- Creating color/zone associations because i'm not using a table like a dumbass
for i in ipairs(betting_zone_GUID) do
	betting_zone_color[betting_zone_GUID[i]] = color_order[i]
end
--[[ The onLoad event is called after the game save finishes loading. --]]
function onLoad()
  deck = getObjectFromGUID(deck_GUID)
	inf_bag_10 = getObjectFromGUID(inf_bag_10_GUID)
	inf_bag_50 = getObjectFromGUID(inf_bag_50_GUID)
	inf_bag_100 = getObjectFromGUID(inf_bag_100_GUID)
  inf_bag_500 = getObjectFromGUID(inf_bag_500_GUID)
	small_blind = getObjectFromGUID(SB_GUID)
	big_blind = getObjectFromGUID(BB_GUID)
	dealer_token = getObjectFromGUID(dealer_token_GUID)
	deal = getObjectFromGUID(deal_GUID)
	reset = getObjectFromGUID(reset_GUID)
	collect = getObjectFromGUID(collect_bets_GUID)
	add_text = getObjectFromGUID(total_bets_text_GUID)
	pot_zone = getObjectFromGUID(pot_GUID)
	table_zone = getObjectFromGUID(table_zone_GUID)
	discard_zone = getObjectFromGUID(discard_zone_GUID)
	-- this is a function not an event so this might not get an accurate list
	-- if a player changes seats vs loads in the game to trigger onLoad
	player_colors = getSeatedPlayers()
	getOrder()
	-- player_colors = {"White", "Red", "Orange", "Pink"}
	dealer = nil
	state = 0
	deck_script = deck.getLuaScript()
end

function onPlayerChangedColor(color)
-- Player defaults to grey when choosing a color then when sitting at a seat it updates again
    if color != 'Grey' and color != 'Black' then
      dealInitialChips(color)
		end
		getOrder()
end
-- This function updates the player_colors array when player changes colors
function getOrder()
	-- color_order = {"White",  "Red", "Orange",Yellow","Green""Blue", "Purple","Pink"}
	player_colors = {}
	local j = 1
	for i in ipairs(color_order) do
		if Player[color_order[i]].seated then
			player_colors[j] = color_order[i]
			j = j + 1
		end
	end
end
-- This function gets the color zone dealer token is at
function onObjectEnterScriptingZone(zone, enter_obj)
	if enter_obj.getGUID() == dealer_token.guid then
		dealer = getColor(zone.guid)
		return dealer
	end
	if enter_obj.tag == "Card" and zone.guid == discard_zone_GUID then
		enter_obj.addTag("Discard")
	end
end
-- This function resets the dealer color NOTE: ANDS are making sure it's not leaving
-- the table_zone, or the pot zone, so just looking at betting zone leaves
function onObjectLeaveScriptingZone(zone, leave_obj)
	-- if leave_object.getGUID() == dealer_token.guid and zone.guid != table_zone_GUID and zone.guid != pot_GUID then
	-- 	dealer = nil
	-- 	return dealer
	-- end
	if zone.guid == discard_zone_GUID then
		leave_obj.removeTag("Discard")
	end
end

-- This just returns the color given the zone id
function getColor(zone_guid)
	return betting_zone_color[zone_guid]
end

-- STATES: 0 and 1 = deal 1 card
-- 2 = deal the flop
-- 3 deal the turn
-- 4 deal the river
-- 5 = collect chips and display "SHOWDOWN" text
-- NOTE: nil is called when dealer chip is displaced by move dealer function
function play(obj,color)
	if color == dealer then
		if state == 0 or state == 1 then
			if state == 0 then
				if deck.getQuantity() != 52 then
					rgb = {r=1, g=0, b=0}
					broadcastToAll("Deck does not have 52 cards. Found "..deck.getQuantity(), rgb)
					return
				end
			end
			-- Deal clockwise from dealer.
			deal_params = {dealer, player_colors}
			deck.call("deal", deal_params)
			if state == 0 then
				state = 1
			else
				state = 2
			end
		elseif state == 2 then
			collect_chips()
		 	deck.call("flop")
			state = 3
		elseif state == 3 then
			collect_chips()
			deck.call("turn")
			state = 4
		elseif state == 4 then
			collect_chips()
			deck.call("river")
			state = 5
		else
			rgb = {r=1, g=1, b=0}
			broadcastToAll("SHOWDOWN", rgb)
			collect_chips()
		end
	else
		rgb = {r=1, g=0, b=0}
		broadcastToAll("Invalid Dealer", rgb)
	end
end

-- resets gameboard, takes cards from players hands and table, replaces them in the deck.
-- if deck does not equal 52 cards after reset, delete old deck, create new deck in its spot
-- reset state variable
function reset_board(obj, color)
	state = 0
	local discard_cards = discard_zone.getObjects()
	local table_cards = table_zone.getObjects()
	local deck_position = deck.getPosition() -- gets current position of the deck
	-- making position higher so it doesn't destroy the deck.
	deck_position[2] = deck_position[2]+3
	if color != dealer then
		print("Dealer can only reset")
	else
		if discard_cards[1] != nil then
			if not(discard_cards[1].is_face_down) then
				discard_cards[1].flip()
				Wait.time(
					function() discard_cards[1].setPosition(deck_position) end, .6)
			else
				discard_cards[1].setPosition(deck_position)
			end
		end
		for i in ipairs(table_cards) do
			if table_cards[i].tag == "Card" then
				if not table_cards[i].is_face_down then
					table_cards[i].flip()
					table_cards[i].putObject(deck)
				else
					table_cards[i].putObject(deck)
				end
			elseif (table_cards[i].tag == "Deck") and (not table_cards[i].hasTag("Discard")) and (table_cards[i].getQuantity() <= 16) then
				if not(table_cards.is_face_down) then
					table_cards[i].flip()
					table_cards[i].setPosition(deck_position)
					table_cards[i].setRotation(deck_rotation)
				else
					table_cards[i].setPosition(deck_position)
					table_cards[i].setRotation(deck_rotation)
				end
			end
		end
	Wait.time(|| deck.shuffle(), 1)
	blinds_params = {dealer, player_colors}
	small_blind.call("move_blind",blinds_params)
	big_blind.call("move_blind",blinds_params)
	dealer_token.call("move_dealer",blinds_params)
	add_text.setValue("Total Pot: $0")
	Wait.time(
		function()
			deck.setPosition(self.getVar("deck_position"))
		end,
		1)
	end
end
-- Goes through all the zones and takes the chips into the pot
function collect_chips()
	local zone_objects = {}
	for i in pairs(betting_zone_GUID) do
		local object_zone = getObjectFromGUID(betting_zone_GUID[i])
		zone_objects[i] = object_zone.getObjects()
		for j in ipairs(zone_objects[i]) do
			if zone_objects[i][j].getValue() == 10 then
				zone_objects[i][j].setPosition(pot_position_10s)
				zone_objects[i][j].setRotation(pot_rotation)
			elseif zone_objects[i][j].getValue() == 50 then
				zone_objects[i][j].setPosition(pot_position_50s)
				zone_objects[i][j].setRotation(pot_rotation)
			elseif zone_objects[i][j].getValue() == 100 then
				zone_objects[i][j].setPosition(pot_position_100s)
				zone_objects[i][j].setRotation(pot_rotation)
			elseif zone_objects[i][j].getValue() == 500 then
				zone_objects[i][j].setPosition(pot_position_500s)
				zone_objects[i][j].setRotation(pot_rotation)
			end
		end
	end

	Wait.time(function() add_chips(pot_zone,add_text) end, 0.03)
end
-- Takes the chips in the pot zone and does some math to figure out how much
-- it's worth, updates text to accurate number
function add_chips(zone,text)
	local total_objects = zone.getObjects()
	local total = 0
	for i in ipairs(total_objects) do
		if total_objects[i].tag == "Chip" then
			if total_objects[i].getQuantity() != -1 then
				total = total + total_objects[i].getQuantity() * total_objects[i].getValue()
			else
				total = total + total_objects[i].getValue()
			end
		end
	end
	text.setValue("Total Pot: $"..total)
end
-- Just deals the intial chips to the color called triggered by onPlayerChangedColor
function dealInitialChips(color)
	for i = 1, num_10 do
    inf_bag_10.call('dealChips', {color})
  end
  for i = 1, num_50 do
    inf_bag_50.call('dealChips', {color})
  end
  for i = 1, num_100 do
    inf_bag_100.call('dealChips', {color})
  end
end
